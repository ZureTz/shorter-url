// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package repo

import (
	"context"
)

const createNewUser = `-- name: CreateNewUser :exec
insert into users (
  user_id,
  username,
  password_hash,
  email
) values (
  $1, $2, $3, $4
)
`

type CreateNewUserParams struct {
	UserID       string `json:"user_id"`
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
	Email        string `json:"email"`
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) error {
	_, err := q.db.ExecContext(ctx, createNewUser,
		arg.UserID,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
	)
	return err
}

const getUserInfoFromEmail = `-- name: GetUserInfoFromEmail :one
select
  id, user_id, username, password_hash, email, created_at
from
  users
where
  email = $1
`

func (q *Queries) GetUserInfoFromEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserInfoFromEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserInfoFromUserID = `-- name: GetUserInfoFromUserID :one
select
  id, user_id, username, password_hash, email, created_at
from
  users
where
  user_id = $1
`

func (q *Queries) GetUserInfoFromUserID(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserInfoFromUserID, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getUserInfoFromUsername = `-- name: GetUserInfoFromUsername :one
select
  id, user_id, username, password_hash, email, created_at
from
  users
where
  username = $1
`

func (q *Queries) GetUserInfoFromUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserInfoFromUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const isNewUserAvailable = `-- name: IsNewUserAvailable :one
select not exists (
  select 
    1 
  from 
    users 
  where 
    username = $1
    or email = $2
) as is_available
`

type IsNewUserAvailableParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) IsNewUserAvailable(ctx context.Context, arg IsNewUserAvailableParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isNewUserAvailable, arg.Username, arg.Email)
	var is_available bool
	err := row.Scan(&is_available)
	return is_available, err
}

const resetUserPassword = `-- name: ResetUserPassword :exec
update users
set
  password_hash = $1
where
  email = $2
`

type ResetUserPasswordParams struct {
	PasswordHash string `json:"password_hash"`
	Email        string `json:"email"`
}

func (q *Queries) ResetUserPassword(ctx context.Context, arg ResetUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, resetUserPassword, arg.PasswordHash, arg.Email)
	return err
}
